import os
import google.generativeai as genai
from dotenv import load_dotenv
from parse_youtube import get_youtube_transcript

# Load environment variables and configure Gemini
load_dotenv()
genai.configure(api_key=os.getenv('GEMINI_API_KEY'))
model = genai.GenerativeModel('gemini-1.5-flash')

def generate_content(url):
    """
    Generate YouTube title and description using Gemini AI based on video transcript
    
    Args:
        url (str): YouTube video URL
        
    Returns:
        tuple: (title, description) generated by Gemini AI
    """
    try:
        # Get transcript from the YouTube URL
        transcript_text = get_youtube_transcript(url)
        
        if not transcript_text:
            print("❌ No transcript available for content generation")
            return None, None
        
        print("🔄 Generating content with Gemini AI...")
        
        # Generate YouTube title using Gemini
        yt_title = model.generate_content(f"Can you create a Youtube title for this video PICK BEST ONE DON'T GIVE OPTIONS -- response no more than 15 words: {transcript_text}")
        
        # Generate YouTube description using Gemini
        yt_description = model.generate_content(f"Can you create a Youtube description for this video PICK BEST ONE DON'T GIVE OPTIONS -- response no more than 300 words don't include your thought process either just the end result: {transcript_text}")
        
        print("✅ Content generated successfully")
        return yt_title.text, yt_description.text
        
    except Exception as e:
        print(f"❌ Error generating content: {e}")
        return None, None

if __name__ == "__main__":
    # Test the function
    test_url = "https://www.youtube.com/watch?v=qw9W6gA81eo&list=PLqMymTkulLcK_gXfkH94oNH0xLfW9W935&index=5&t=26s"
    title, description = generate_content(test_url)
    
    if title and description:
        print(f"\n📝 Generated Title: {title}")
        print(f"\n📄 Generated Description: {description}")
    else:
        print("\n❌ Failed to generate content")